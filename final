import cv2
import numpy as np
import matplotlib.pyplot as plt

img_height = 150 #사진 세로
img_wight = 120 #사진 가로
img_len = img_wight * img_height # 사진 크기
img_list = []
imgAverage = []

train_image = 310  #학습 이미지

def processing_img(path): # 이미지 처리하는 함수
    imgColor = cv2.imread(path,cv2.IMREAD_COLOR) # 이미지를 컬러로 받아옴
    gray = cv2.cvtColor(imgColor,cv2.COLOR_BGR2GRAY) # 받아온 이미지를 그레이로 변경
    #cv2.imshow("image - " + str(i),gray) # 이미지 보여주는 함수
    Finaly_gray = cv2.resize(gray,(img_wight,img_height)) # 이미지의 크기를 120 150으로 바꿔주는 함수
    return np.array(Finaly_gray).flatten() # 결과값을 1차원 배열로 보냄

def show_img(inputing,imgname): #만든 이미지를 보여주는 함수
    img = np.reshape(inputing,(img_height,img_wight)) # 1차원이미지를 다시 2차원으로
    img = img.astype('uint8') #이미지 타입변경
    cv2.imshow(imgname,img) #이미지 보여주기

for i in range(0,train_image): #이미지 전부를 1차원벡터로 저장
    path ="face_img/train/train{0:03d}.jpg".format(i)
    vector = processing_img(path)
    img_list.append(vector) #모든이미지가 1차원으로 저장


img_list = np.array(img_list) # 크기 (310, 18000)
img_list = img_list.astype('float32') #1번

#2번시작

for i in range(0,img_len): # 18000만큼
    sum = 0.0
    for j in range(0,train_image):
        sum += img_list[j][i]
    imgAverage.append(sum / train_image )

# imgAverage 길이 18000

X_bar = []

#show_img(imgAverage,"a")
covariance = [] # 공분산행렬

for i in range(0,train_image):
    X_bar.append( [] )
    for j in range(0,img_len):
        X_bar[i].append( img_list[i][j] - imgAverage[j] )

# X_bar의 크기 (310,18000) , X_bart의 크기(18000,310)

#for i in range(0,train_image):
    #show_img(m[i],"{0:03d}".format(i))

X_bar_t = np.array(X_bar).T
X_bar = np.array(X_bar)

covariance_2d = [ [ ] ]

covariance = X_bar @  X_bar_t   # 공분산 행렬 1 by 300 by 300
covariance = np.array(covariance)

k = 3 # 고유벡터 3개 사용

covariance_2d = np.reshape(covariance,(310,310))  # 310 by 310 으로 변환

eigenvalues, eigenvectors = np.linalg.eig(covariance_2d) # 고윳값 고유벡터 구하는 함수

eigenvalues, eigenvectors = np.real(eigenvalues),np.real(eigenvectors)

#plt.plot(eigenvalues) #고윳값의 그래프를 보여줌
#plt.show()


index_dict = {eigenvalues[i]: i for i in range(len(eigenvalues))}

eigenvalues.sort()

eigenvalues = eigenvalues[::-1]

evalue = eigenvalues[:k]

V = np.array([eigenvectors[:, index_dict[i]] for i in evalue])

V = X_bar.T @ V.T
V = V / np.sqrt(np.sum(V**2))
V = V.T

X = V @ X_bar.T #V = ( 3 , 18000) X = (3 , 310)


num = int(input("테스트할 사진의 번호를 입력하시오( 0 ~ 92 ) : "))
test_path = "face_img/test/test{0:03d}.jpg".format(num)
test_img = processing_img(test_path)


testAverage = []

for i in range(0, img_len):
    testAverage.append(test_img[i] - imgAverage[i]) #18000 1


testAverage = np.array(testAverage)


y_hat = V @ testAverage

result = []
for i in range(X.shape[1]):
    result.append(np.sqrt(((y_hat.T - X[:, i]) ** 2).sum()))

result_idx = 0
min = result[0]

for i, m in enumerate(result, 1):
    if m < min:
        min = m
        result_idx = i

test_image = cv2.imread("face_img/test/test{0:03d}.jpg".format(num),cv2.IMREAD_COLOR) # 이미지를 컬러로 받아옴
target_image = cv2.imread("face_img/train/train{0:03d}.jpg".format(result_idx),cv2.IMREAD_COLOR) # 이미지를 컬러로 받아옴

test_image = cv2.resize(test_image,(250,300))
target_image = cv2.resize(target_image,(250,300))

cv2.imshow("test_{0:03d}       ".format(num)  , test_image )
cv2.imshow("train_{0:03d}      ".format(result_idx) , target_image )


cv2.waitKey(0)

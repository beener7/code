import cv2
import numpy
import numpy as np

img_height = 150
img_wight = 120
img_len = img_wight * img_height
img_list = []
imgAverage = []

train_image = 300
def processing_img(path):
    imgColor = cv2.imread(path,cv2.IMREAD_COLOR)
    gray = cv2.cvtColor(imgColor,cv2.COLOR_BGR2GRAY)
    #cv2.imshow("image - " + str(i),gray)
    Finaly_gray = cv2.resize(gray,(img_wight,img_height))
    return np.array(Finaly_gray).flatten()

def show_img(inputing,imgname):
    img = np.reshape(inputing,(img_height,img_wight))
    img = img.astype('uint8')
    cv2.imshow(imgname,img)

for i in range(0,train_image):
    path ="face_img/train/train{0:03d}.jpg".format(i)
    vector = processing_img(path)
    img_list.append(vector)

img_list = np.array(img_list)
img_list = img_list.astype('float32')

for i in range(0,img_len):
    sum = 0.0
    for j in range(0,train_image):
        sum += img_list[j][i]
    imgAverage.append(sum / train_image )

m = [] # 원본 - 평균 영상
mt = []
#show_img(imgAverage,"a")
covariance = [] # 공분산행렬

for i in range(0,train_image):
    m.append( [] )
    for j in range(0,img_len):
        m[i].append( img_list[i][j] - imgAverage[j] )

#for i in range(0,train_image):
    #show_img(m[i],"{0:03d}".format(i))
mt = np.array(m).T
m = np.array(m)

covariance.append(m.dot(mt))                  # 300 by 300
covariance = np.array(covariance)

eigenvalues, eigenvectors = np.linalg.eig(covariance) # 고윳값 고유벡터 구하는 함수

#for i in range(len(eigenvalues)):
    #print("고윳값 {}: {}".format(i+1, eigenvalues[i]))
    #print("고유벡터 {}: {}".format(i+1, eigenvectors[:, i]))

#print(covariance.shape)

cv2.waitKey(0)

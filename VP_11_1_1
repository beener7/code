import cv2
import numpy as np

face_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_frontalface_alt2.xml")
eye_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_eye.xml")
mouth_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_mcs_mouth.xml")

def preprocessing(no):
    image = cv2.imread('images/face/%02d.jpg' % no, cv2.IMREAD_COLOR)
    if image is None: return None, None
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)
    return image, gray

def image_print(choice):

    image, gray = preprocessing(choice)

    if image is None: raise Exception("영상 파일 읽기 에러")
    faces = face_cascade.detectMultiScale(gray, 1.1, 3, 0, (25, 25))
    check = False;


    for (x, y, w, h) in faces:
        if len(faces):
            mouse_check = False

            face_image = image[y:y + h, x:x + w]
            face_image_mouth = image[y + (h // 2):y + h, x:x + w]

            eyes = eye_cascade.detectMultiScale(face_image, 1.1, 2, 0, (3, 3))
            mouths = mouth_cascade.detectMultiScale(face_image_mouth, 1.1, 3, 0, (3, 7))

            if len(eyes) == 2:
                for ex, ey, ew, eh in eyes:
                    center = (x + ex + ew // 2, y + ey + eh // 2)
                    cv2.circle(image, center, 10, (0, 255, 0), 2)
            else:
                print("눈 미검출")
            for mx, my, mw, mh in mouths:
                cv2.rectangle(face_image_mouth, (mx, my), (mx+mw, my+mh) ,(0,0,255) ,2 )
                mouse_check = True
            cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
            if mouse_check == False:
                print("입 미검출")
            check = True
            cv2.imshow('img', image)

    if check == False:
        cv2.imshow("image", image)
        print("얼굴 미검출")
    cv2.waitKey()


num = input("select 1(여러 파일) or 2(캠 입력): ")
if num == "1":
    choice = int(input("enter file number(1~60,66): "))
    image_print(choice)



if num == "2":
    capture = cv2.VideoCapture(0)
    if capture.isOpened() == False:
        raise Exception("카메라 연결 안됨")

    title = "View Frame from Camera"
    while True:
        ret,frame = capture.read()
        if not ret: break

        faces = face_cascade.detectMultiScale(frame, 1.1, 3, 0, (25, 25))
        for (x, y, w, h) in faces:
            if len(faces):
                face_image = frame[y:y + h, x:x + w]
                face_image_mouth = frame[y + (h // 2):y + h, x:x + w]

                eyes = eye_cascade.detectMultiScale(face_image, 1.1, 2, 0, (3, 3))
                mouths = mouth_cascade.detectMultiScale(face_image_mouth, 1.1, 3, 0, (3, 7))
                if len(eyes) == 2:
                    for ex, ey, ew, eh in eyes:
                        center = (x + ex + ew // 2, y + ey + eh // 2)
                        cv2.circle(frame, center, 10, (0, 255, 0), 2)
                    for mx, my, mw, mh in mouths:
                        cv2.rectangle(face_image_mouth, (mx, my), (mx + mw, my + mh), (0, 0, 255), 2)

            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

        cv2.imshow(title,frame)
        if cv2.waitKey(30) >= 0: break
    capture.release()

